// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// confint_binom_cpp
Rcpp::NumericVector confint_binom_cpp(int n, int N, double cl, double p_min, double p_max, double p_step);
RcppExport SEXP _fcci_confint_binom_cpp(SEXP nSEXP, SEXP NSEXP, SEXP clSEXP, SEXP p_minSEXP, SEXP p_maxSEXP, SEXP p_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type cl(clSEXP);
    Rcpp::traits::input_parameter< double >::type p_min(p_minSEXP);
    Rcpp::traits::input_parameter< double >::type p_max(p_maxSEXP);
    Rcpp::traits::input_parameter< double >::type p_step(p_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(confint_binom_cpp(n, N, cl, p_min, p_max, p_step));
    return rcpp_result_gen;
END_RCPP
}
// confint_pois_cpp
Rcpp::NumericVector confint_pois_cpp(int n, double b, double cl, double lambda_min, double lambda_max, double lambda_step);
RcppExport SEXP _fcci_confint_pois_cpp(SEXP nSEXP, SEXP bSEXP, SEXP clSEXP, SEXP lambda_minSEXP, SEXP lambda_maxSEXP, SEXP lambda_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type cl(clSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min(lambda_minSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_step(lambda_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(confint_pois_cpp(n, b, cl, lambda_min, lambda_max, lambda_step));
    return rcpp_result_gen;
END_RCPP
}
// confint_pois_adj_cpp
Rcpp::NumericVector confint_pois_adj_cpp(int n, double b, double cl, double lambda_min, double lambda_max, double lambda_step, double b_max, double b_step);
RcppExport SEXP _fcci_confint_pois_adj_cpp(SEXP nSEXP, SEXP bSEXP, SEXP clSEXP, SEXP lambda_minSEXP, SEXP lambda_maxSEXP, SEXP lambda_stepSEXP, SEXP b_maxSEXP, SEXP b_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type cl(clSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_min(lambda_minSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_step(lambda_stepSEXP);
    Rcpp::traits::input_parameter< double >::type b_max(b_maxSEXP);
    Rcpp::traits::input_parameter< double >::type b_step(b_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(confint_pois_adj_cpp(n, b, cl, lambda_min, lambda_max, lambda_step, b_max, b_step));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fcci_confint_binom_cpp", (DL_FUNC) &_fcci_confint_binom_cpp, 6},
    {"_fcci_confint_pois_cpp", (DL_FUNC) &_fcci_confint_pois_cpp, 6},
    {"_fcci_confint_pois_adj_cpp", (DL_FUNC) &_fcci_confint_pois_adj_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_fcci(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
